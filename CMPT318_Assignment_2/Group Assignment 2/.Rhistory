install.packages("ggplot2")
install.packages("ggplot2")
install.packages("cli")
install.packages("cli")
library(tidyverse)
print(mpg)
?mpg
print(mpg = 15)
print(mpg = ...)
print(mpg = 5)
print(mpg = '15')
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
print(mpg)
mtcars
nrows(mtcars)
nrow(mtcars)
ncol(mtcars)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
nrow(mpg[class == "pickup"])
nrow(mpg[mpg$class == "pickup"])
nrow(mpg[$class == "pickup"])
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = 'class'))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
col(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = manufacturer))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = manufacturer))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = "green"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = "green"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = "green")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = "darkgreen")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = "darkblue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty), colour = 'black')
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty, colour = 'black'))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cty))
head(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cty, colour = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = model))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = displ))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = displ))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty > 20))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty > 25))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty > 25)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = cty > 25, colour = hwy > 30)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30)) +
facet_wrap(~ class, nrow = 2)
head(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30)) +
facet_wrap(~ manufacturer, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30, size = class)) +
facet_wrap(~ manufacturer, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30, size = cty)) +
facet_wrap(~ manufacturer, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30)) +
facet_wrap(~ manufacturer, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30)) +
facet_grid(. ~ cyl)
print(mpg)
print(mpg = all)
print(mpg, n = 100)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = hwy > 30)) +
facet_grid(cyl ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(cyl ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ manufacturer)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl, colour = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = hwy, colour = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
# Convert the column Date to Date objects (so that we can extract)
data$Date = as.POSIXlt(data$Date, format = "%d/%m/%Y")
library(forecast)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(lubridate)
library(forecast)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(lubridate)
library(forecast)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(lubridate)
library(forecast)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2/Group Assignment 2/CMPT318_Assignment_2.R")
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2/Group Assignment 2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
# Convert the column Date to Date objects (so that we can extract)
data$Date = as.POSIXlt(data$Date, format = "%d/%m/%Y")
View(data)
View(data)
# Extract data from all complete weeks (we will take away the last day as it is a monday)
df <- data[data$Date >= as.POSIXlt("2007-01-01") & data$Date <= as.POSIXlt("2007-12-30"),]
View(df)
# Parse column 2 into separate columns
dfsplit <- strsplit(df[,2], ",") # split the data
View(dfsplit)
df2 <- data.frame(dfsplit) # Put the data into a df
View(df2)
df2 <- as.data.frame(t(df2)) #transpose to turn rows into cols
View(df2)
# Reindexing with help from James Comment:
# https://stackoverflow.com/questions/7567790/change-the-index-number-of-a-dataframe
rownames(df2) <- 1:nrow(df2)
df2 <- subset(df2, select = -V1) # Drop all columns we dont need
View(df2)
df2$V2 <- substr(df2$V2, 2, 9) # Drop the quotations from "time" column
# Rename the column names
colnames(df2) <- c("Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
# Merge Date and Time into one column
df$Date <- as.POSIXlt(paste(df$Date, df2$Time), format = "%Y-%m-%d %H:%M:%S")
View(df)
View(df2)
View(df)
# Drop the columns that we don't want anymore
df <- subset (df, select = Date)
df$Time <- df2$Time
df2 <- subset (df2, select = -Time)
View(df2)
View(df)
# Merge df and df2 and deselect all we dont need
df <- cbind(df, df2)
df <- subset (df, select = -c( Global_reactive_power, Global_active_power, Time, Voltage, Sub_metering_1, Sub_metering_2, Sub_metering_3) )
View(df)
View(df2)
View(df)
#Convert char to double
df$Global_intensity <- as.double(df$Global_intensity) # Convert char to double
#Convert char to double
df$Global_intensity <- as.double(df$Global_intensity) # Convert char to double
# n weeks, ms samples and msn number of samples returned for the week
n = 52
nw = 1
msn = 10080
ms = 10
dfw <- data.frame(Num_week=df$Global_intensity, Moving_average=df$Global_intensity)
View(dfw)
# breakdown the average calculations per week
for (i in 1:n) {
nStart = i*10080 - 10079
nEnd = nStart + 10079
dfw[nStart:nEnd, 1] = i
dfw[nStart:nEnd, 2] = ma(df$Global_intensity[nStart:nEnd], ms, centre = TRUE)
}
View(dfw)
View(df)
View(df2)
# create average week
dfw <- na.omit(dfw) # remove all incomplete cases of a data object
View(dfw)
View(dfw)
View(dfw)
rownames(dfw) <- 1:nrow(dfw)
View(dfw)
View(df)
View(dfw)
?aggregate()
?aggregate.data.frame
# create average week
df_asw <- aggregate(x = dfw$Moving_average, by = list(dfw$Num_week), FUN = mean, simplify = TRUE, drop = TRUE)
View(df_asw)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(lubridate)
library(forecast)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2/Group Assignment 2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
# Convert the column Date to Date objects (so that we can extract)
data$Date = as.POSIXlt(data$Date, format = "%d/%m/%Y")
# Extract data from all complete weeks (we will take away the last day as it is a monday)
df <- data[data$Date >= as.POSIXlt("2007-01-01") & data$Date <= as.POSIXlt("2007-12-30"),]
# Parse column 2 into separate columns
dfsplit <- strsplit(df[,2], ",") # split the data
df2 <- data.frame(dfsplit) # Put the data into a df
df2 <- as.data.frame(t(df2)) #transpose to turn rows into cols
# Reindexing with help from James Comment:
# https://stackoverflow.com/questions/7567790/change-the-index-number-of-a-dataframe
rownames(df2) <- 1:nrow(df2)
df2 <- subset(df2, select = -V1) # Drop all columns we dont need
df2$V2 <- substr(df2$V2, 2, 9) # Drop the quotations from "time" column
# Rename the column names
colnames(df2) <- c("Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
# Merge Date and Time into one column
df$Date <- as.POSIXlt(paste(df$Date, df2$Time), format = "%Y-%m-%d %H:%M:%S")
# Drop the columns that we don't want anymore
df <- subset (df, select = Date)
df$Time <- df2$Time
df2 <- subset (df2, select = -Time)
# Merge df and df2 and deselect all we dont need
df <- cbind(df, df2)
df <- subset (df, select = -c( Global_reactive_power, Global_active_power, Time, Voltage, Sub_metering_1, Sub_metering_2, Sub_metering_3) )
#Convert char to double
df$Global_intensity <- as.double(df$Global_intensity) # Convert char to double
# n weeks, ms samples and msn number of samples returned for the week
n = 52
nw = 1
msn = 10080
ms = 10
dfw <- data.frame(Num_week=df$Global_intensity, Moving_average=df$Global_intensity)
# breakdown the average calculations per week
for (i in 1:n) {
nStart = i*10080 - 10079
nEnd = nStart + 10079
dfw[nStart:nEnd, 1] = i
dfw[nStart:nEnd, 2] = ma(df$Global_intensity[nStart:nEnd], ms, centre = TRUE)
}
# create average week
df_asw <- aggregate(x = dfw$Moving_average, by = list(dfw$Num_week), FUN = mean, simplify = TRUE, drop = TRUE)
View(df_asw)
View(dfw)
# create average week
dfw <- na.omit(dfw)           # remove all incomplete cases of a data object
View(dfw)
df_asw <- aggregate(x = dfw$Moving_average, by = list(dfw$Num_week), FUN = mean, simplify = TRUE, drop = TRUE)
View(dfw)
View(df_asw)
View(df_asw)
source("~/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2/Group Assignment 2/CMPT318_Assignment_2.R", echo=TRUE)
View(dfav)
# create average week
dfw <- na.omit(dfw)           # remove all incomplete cases of a data object
df_asw <- aggregate(x = dfw$Moving_average, by = list(dfw$Num_week), FUN = mean, simplify = TRUE, drop = TRUE)
View(dfav)
View(dfav)
View(dfw)
View(dfw)
View(df)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(lubridate)
library(forecast)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2/Group Assignment 2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
# Convert the column Date to Date objects (so that we can extract)
data$Date = as.POSIXlt(data$Date, format = "%d/%m/%Y")
# Extract data from all complete weeks (we will take away the last day as it is a monday)
df <- data[data$Date >= as.POSIXlt("2007-01-01") & data$Date <= as.POSIXlt("2007-12-30"),]
# Parse column 2 into separate columns
dfsplit <- strsplit(df[,2], ",") # split the data
df2 <- data.frame(dfsplit) # Put the data into a df
df2 <- as.data.frame(t(df2)) #transpose to turn rows into cols
View(df)
View(df)
# Reindexing with help from James Comment:
# https://stackoverflow.com/questions/7567790/change-the-index-number-of-a-dataframe
rownames(df2) <- 1:nrow(df2)
View(df2)
df2 <- subset(df2, select = -V1) # Drop all columns we dont need
df2$V2 <- substr(df2$V2, 2, 9) # Drop the quotations from "time" column
# Rename the column names
colnames(df2) <- c("Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
View(df2)
View(df)
# Merge Date and Time into one column
df$Date <- as.POSIXlt(paste(df$Date, df2$Time), format = "%Y-%m-%d %H:%M:%S")
# Drop the columns that we don't want anymore
df <- subset (df, select = Date)
df$Time <- df2$Time
View(df)
View(df2)
# Merge df and df2 and deselect all we dont need
df <- cbind(df, df2)
View(df)
# Drop the columns that we don't want anymore
df <- subset (df, select = Date)
df$Time <- df2$Time
df2 <- subset (df2, select = -Time)
# Merge df and df2 and deselect all we dont need
df <- cbind(df, df2)
View(df)
df <- subset (df, select = -c( Global_reactive_power, Global_active_power, Voltage, Sub_metering_1, Sub_metering_2, Sub_metering_3) )
#Convert char to double
df$Global_intensity <- as.double(df$Global_intensity) # Convert char to double
# n weeks, ms samples and msn number of samples returned for the week
n = 52
View(df)
# Set the proper working directory
setwd("/Users/MichaelKuby/Documents/GitHub/CMPT318_CyberSecurity/CMPT318_Assignment_2/Group Assignment 2")
# Get the data from the data set
data <- read.table("Group_Assignment_2_Dataset.txt", header = TRUE)
# Convert the column Date to Date objects (so that we can extract)
data$Date = as.POSIXlt(data$Date, format = "%d/%m/%Y")
# Extract data from all complete weeks (we will take away the last day as it is a monday)
df <- data[data$Date >= as.POSIXlt("2007-01-01") & data$Date <= as.POSIXlt("2007-12-30"),]
# Parse column 2 into separate columns
dfsplit <- strsplit(df[,2], ",") # split the data
df2 <- data.frame(dfsplit) # Put the data into a df
